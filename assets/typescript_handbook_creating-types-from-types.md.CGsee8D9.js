import{_ as e,b as t,o as a,a9 as p}from"./chunks/framework.DOt9ymxk.js";const f=JSON.parse('{"title":"Creating Types from Types","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/handbook/creating-types-from-types.md","filePath":"typescript/handbook/creating-types-from-types.md","lastUpdated":1662003214000}'),o={name:"typescript/handbook/creating-types-from-types.md"},s=p('<h1 id="creating-types-from-types" tabindex="-1">Creating Types from Types <a class="header-anchor" href="#creating-types-from-types" aria-label="Permalink to &quot;Creating Types from Types&quot;">​</a></h1><h6 id="tags-typescript" tabindex="-1">tags: <code>TypeScript</code> <a class="header-anchor" href="#tags-typescript" aria-label="Permalink to &quot;tags: `TypeScript`&quot;">​</a></h6><p>TypeScript 的型別系統非常強大，因為它允許我們使用其他型別去表達型別。</p><p>這個想法最簡單的形式就是泛型 (generics)，在實際開發中可以使用各式各樣的型別運算子 (type operator) 來操作，也可以使用已經擁有的值來表示型別。</p><p>我們可以透過各種 type operator 去用簡潔、可維護的方式去表達複雜的操作以及值。在這個章節我們將介紹根據現有的型別或值來表達新型別的方法。</p><ul><li><a href="/memochou/typescript/handbook/generics.html">Generics</a> - Types which take parameters</li><li><a href="/memochou/typescript/handbook/keyof-types.html">Keyof Type Operator</a> - Using the <code>keyof</code> operator to create new types</li><li><a href="/memochou/typescript/handbook/typeof-types.html">Typeof Type Operator</a> - Using the <code>typeof</code> operator to create new types</li><li><a href="/memochou/typescript/handbook/indexed-access-types.html">Indexed Access Types</a> - Using <code>Type[&#39;a&#39;]</code> syntax to access a subset of a type</li><li><a href="/memochou/typescript/handbook/conditional-types.html">Conditional Types</a> - Types which act like if statements in the type system</li><li><a href="/memochou/typescript/handbook/mapped-types.html">Mapped Types</a> - Creating types by mapping each property in an existing type</li><li><a href="/memochou/typescript/handbook/template-literal-types.html">Template Literal Types</a> - Mapped types which change properties via template literal strings</li></ul>',6),r=[s];function i(c,n,y,h,l,m){return a(),t("div",null,r)}const T=e(o,[["render",i]]);export{f as __pageData,T as default};
