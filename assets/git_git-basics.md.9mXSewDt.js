import{_ as i,b as s,o as a,a9 as t}from"./chunks/framework.DOt9ymxk.js";const A=JSON.parse('{"title":"Git 筆記 02 - Git 的基本操作","description":"","frontmatter":{},"headers":[],"relativePath":"git/git-basics.md","filePath":"git/git-basics.md","lastUpdated":1663951644000}'),n={name:"git/git-basics.md"},l=t(`<h1 id="git-筆記-02-git-的基本操作" tabindex="-1">Git 筆記 02 - Git 的基本操作 <a class="header-anchor" href="#git-筆記-02-git-的基本操作" aria-label="Permalink to &quot;Git 筆記 02 - Git 的基本操作&quot;">​</a></h1><h6 id="tags-git" tabindex="-1">tags: <code>git</code> <a class="header-anchor" href="#tags-git" aria-label="Permalink to &quot;tags: \`git\`&quot;">​</a></h6><h2 id="_1-獲取-git-儲存庫的兩種方式" tabindex="-1">1. 獲取 Git 儲存庫的兩種方式 <a class="header-anchor" href="#_1-獲取-git-儲存庫的兩種方式" aria-label="Permalink to &quot;1. 獲取 Git 儲存庫的兩種方式&quot;">​</a></h2><ol><li>將尚未進行版本控制的本地目錄轉換為 git 儲存庫</li><li>從其他託管儲存庫中 <font color="#A10710">clone</font> 一個已存在的 git 儲存庫</li></ol><h2 id="_2-在現有的目錄中初始化儲存庫" tabindex="-1">2. 在現有的目錄中初始化儲存庫 <a class="header-anchor" href="#_2-在現有的目錄中初始化儲存庫" aria-label="Permalink to &quot;2. 在現有的目錄中初始化儲存庫&quot;">​</a></h2><p>如果自己有一個尚未進行版控的專案目錄，想要用 Git 來控制它，須執行下列兩步驟：</p><ol><li>在專案目錄中打開 CMD 或是 git bash</li><li>執行 <font color="#A10710"><code>git init</code></font> 指令將當前目錄轉換為 git 儲存庫</li></ol><p>git init 指令會建立一個名為 .git 的隱藏檔案，<font color="#A10710">這個 .git 檔案就是當前專案的 Git 儲存庫</font>，裡面包含了初始的必要檔案，這些檔案是 Git 儲存庫的必要組成部分。</p><blockquote><p>※ 查看隱藏檔案方法 <img src="https://i.imgur.com/WQsmSaw.png" alt=""></p></blockquote><h2 id="_3-工作區中檔案的-4-種狀態" tabindex="-1">3. 工作區中檔案的 4 種狀態 <a class="header-anchor" href="#_3-工作區中檔案的-4-種狀態" aria-label="Permalink to &quot;3. 工作區中檔案的 4 種狀態&quot;">​</a></h2><p>工作區的每一支檔案可能有 4 種狀態，這四種狀態共分為兩大類，如圖所示：</p><p><img src="https://i.imgur.com/HsRWnjJ.png" alt=""></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Git 操作的最終結果：讓工作區的檔案都處於<strong>未修改</strong>狀態</p></div><h2 id="_4-檢查檔案狀態" tabindex="-1">4. 檢查檔案狀態 <a class="header-anchor" href="#_4-檢查檔案狀態" aria-label="Permalink to &quot;4. 檢查檔案狀態&quot;">​</a></h2><p>可以使用 <font color="#A10710"><code>git status</code></font> 指令查看檔案處於什麼狀態，例如：</p><p><img src="https://i.imgur.com/LXshmZH.png" alt=""></p><p>在修改檔案清單中可以看到新建的 <font color="#A10710">index.html</font> 檔案處在 <font color="#A10710">Untracked files (未追蹤的檔案)</font> 下面。</p><p>未追蹤的檔案意味著 <font color="#A10710">Git 在之前的提交中沒有這些檔案</font>；Git 不會自動將之納入追蹤範圍，除非明確地告訴它 &quot;我需要使用 Git 追蹤管理該檔案&quot;。</p><h2 id="_5-以精簡的方式顯示檔案狀態" tabindex="-1">5. 以精簡的方式顯示檔案狀態 <a class="header-anchor" href="#_5-以精簡的方式顯示檔案狀態" aria-label="Permalink to &quot;5. 以精簡的方式顯示檔案狀態&quot;">​</a></h2><p>使用 <font color="#A10710"><code>git status</code></font> 輸出的修改檔案清單很詳細，但有些繁瑣。 如果希望以精簡的方式顯示檔案的狀態，可以使用如下兩條完全相等的指令，其中 <font color="#A10710">-s 是 --short 的縮寫</font>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 以精簡的方式顯示檔案狀態</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -s</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --short</span></span></code></pre></div><p>未追蹤的檔案有紅色的 <font color="#A10710">??</font> 標記，例如：</p><p><img src="https://i.imgur.com/zmg8wFj.png" alt=""></p><h2 id="_6-追蹤新檔案" tabindex="-1">6. 追蹤新檔案 <a class="header-anchor" href="#_6-追蹤新檔案" aria-label="Permalink to &quot;6. 追蹤新檔案&quot;">​</a></h2><p>使用指令 <font color="#A10710"><code>git add</code></font> 開始追蹤一個檔案。 所以，要追蹤 index.html 檔案，只須執行如下指令即可：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.html</span></span></code></pre></div><p>此時再執行 <font color="#A10710"><code>git status</code></font> 指令，會看到 index.html 檔案在 <font color="#A10710">Changes to be committed</font> 這行的下面，說明已被追蹤，並處於暫存狀態：</p><p><img src="https://i.imgur.com/ESUBHBJ.png" alt=""></p><p>精簡模式則顯示為綠色的 <font color="green">A</font></p><p><img src="https://i.imgur.com/Jq6vnJk.png" alt=""></p><h2 id="_7-提交更新" tabindex="-1">7. 提交更新 <a class="header-anchor" href="#_7-提交更新" aria-label="Permalink to &quot;7. 提交更新&quot;">​</a></h2><p>現在暫存區有一個 index.html 等待被提交到 Git 儲存庫進行保存。 可以執行 <font color="#A10710"><code>git commit</code></font> 指令進行提交，其中 <font color="#A10710">-m 選項</font>後面是本次的<font color="#A10710">提交訊息</font>，用來<font color="#A10710">對提交的內容做進一步的描述：</font></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">新增了一個 index.html 檔案</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span></span></code></pre></div><p>提交成功後，會出現以下的訊息：</p><p><img src="https://i.imgur.com/tl7w6DJ.png" alt=""></p><p>提交成功後，再次檢查檔案的狀態，得到的提示如下：</p><p><img src="https://i.imgur.com/L4NY6so.png" alt=""></p><p>證明工作區中所有的檔案都處於 &quot;<font color="#A10710">未修改</font>&quot; 狀態，沒有任何檔案需要提交。</p><h2 id="_8-對已提交的檔案進行修改" tabindex="-1">8. 對已提交的檔案進行修改 <a class="header-anchor" href="#_8-對已提交的檔案進行修改" aria-label="Permalink to &quot;8. 對已提交的檔案進行修改&quot;">​</a></h2><p>目前，index.html 檔案已被 Git 追蹤，並且工作區與 Git 儲存庫中的 index.html 保持一致。 當我們修改了工作區中的 index.html 的內容之後，再次執行 <code>git status</code> 或是 <code>git status -s</code> 指令，會看到如下內容：</p><p><img src="https://i.imgur.com/31O1jrO.png" alt=""></p><p>index.html 出現在 <font color="#A10710">Changes not staged for commit</font> 這行下面，說明<font color="#A10710"><strong>已追蹤的檔案內容發生了改變，但還沒有放到暫存區。</strong></font></p><h2 id="_9-暫存已修改的檔案" tabindex="-1">9. 暫存已修改的檔案 <a class="header-anchor" href="#_9-暫存已修改的檔案" aria-label="Permalink to &quot;9. 暫存已修改的檔案&quot;">​</a></h2><p>目前，工作區中的 index.html 已被修改，如果要暫存這次修改，需要再次執行 <code>git add</code> 指令，這個指令是個多功能指令，主要有 3 個功用：</p><ol><li>可以用它<font color="#A10710">開始追蹤新檔案</font></li><li>把<font color="#A10710">已追蹤的、且已修改的</font>檔案放到暫存區</li><li>把有衝突的檔案標記為已解決狀態</li></ol><p><img src="https://i.imgur.com/XNpvr2b.png" alt=""></p><h2 id="_10-提交已暫存的檔案" tabindex="-1">10. 提交已暫存的檔案 <a class="header-anchor" href="#_10-提交已暫存的檔案" aria-label="Permalink to &quot;10. 提交已暫存的檔案&quot;">​</a></h2><p>再次執行 <font color="#A10710"><code>git commit -m &quot;提交訊息&quot;</code></font> 指令，即可將暫存區中記錄的 index.html 的 commit，提交到 Git 儲存庫進行保管：</p><p><img src="https://i.imgur.com/DOXT96G.png" alt=""></p><h2 id="_11-撤銷對檔案的修改" tabindex="-1">11. 撤銷對檔案的修改 <a class="header-anchor" href="#_11-撤銷對檔案的修改" aria-label="Permalink to &quot;11. 撤銷對檔案的修改&quot;">​</a></h2><blockquote><p><strong>撤銷操作的本質</strong>： 用 Git 儲存庫中的檔案覆蓋掉工作區指定的檔案，一般實際開發中比較少使用到。</p></blockquote><p>撤銷對檔案的修改指的是：把對工作區中對應檔案的修改，<font color="#A10710">還原</font>成 Git 儲存庫中所保管的版本。 操作的結果：所有的改動會丟失，且無法恢復! <font color="#A10710">危險性較高，請慎重操作!</font></p><p>假設我改動了 index.html 裡面的內容，但是突然後悔了，此時使用 <code>git checkout -- index.html</code> 指令，即可撤銷對 index.html 的修改</p><h2 id="_12-向暫存區中一次性添加多個檔案" tabindex="-1">12. 向暫存區中一次性添加多個檔案 <a class="header-anchor" href="#_12-向暫存區中一次性添加多個檔案" aria-label="Permalink to &quot;12. 向暫存區中一次性添加多個檔案&quot;">​</a></h2><p>如果需要被暫存的檔案比較多，可以使用如下的指令，一次性將所有新增或修改的檔案加入暫存區：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre></div><p><img src="https://i.imgur.com/VhH8yqL.png" alt=""></p><p>:::success 在實際開發中，會經常下這行指令，將新增和修改過後的檔案加到暫存區 :::</p><h2 id="_13-取消暫存的檔案" tabindex="-1">13. 取消暫存的檔案 <a class="header-anchor" href="#_13-取消暫存的檔案" aria-label="Permalink to &quot;13. 取消暫存的檔案&quot;">​</a></h2><p>如果想要從暫存區中移除對應的檔案，可以使用如下的指令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 要移除的檔案名稱</span></span></code></pre></div><p><img src="https://i.imgur.com/MjsjHBu.png" alt=""></p><h2 id="_14-跳過使用暫存區" tabindex="-1">14. 跳過使用暫存區 <a class="header-anchor" href="#_14-跳過使用暫存區" aria-label="Permalink to &quot;14. 跳過使用暫存區&quot;">​</a></h2><p>Git 標準工作流程為<strong>工作區</strong> → <strong>暫存區</strong> → <strong>Git 儲存庫</strong>，但有時候這麼做略為繁瑣，此時可以跳過暫存區，直接將工作區中的修改提交到 Git 儲存庫，這時候 Git 工作流程簡化為了<strong>工作區</strong> → <strong>Git儲存庫</strong>。</p><p>Git 提供了一個跳過使用暫存區的方式，只要在提交的時候，給 <font color="#A10710">git commit</font> 加上 <font color="#A10710">-a</font> 選項，Git 就會自動把所有已經追蹤過的檔案暫存起來一併提交，從而跳過 git add 步驟：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">提交訊息</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span></span></code></pre></div><p><img src="https://i.imgur.com/wkQMqIg.png" alt=""></p><h2 id="_15-移除檔案" tabindex="-1">15. 移除檔案 <a class="header-anchor" href="#_15-移除檔案" aria-label="Permalink to &quot;15. 移除檔案&quot;">​</a></h2><p>從 Git 儲存庫中移除檔案的方式有兩種：</p><ol><li>從 Git 儲存庫和工作區中<font color="#A10710">同時移除</font>對應檔案</li><li>只從 Git 儲存庫中移除指定檔案，但保留工作區中的對應檔案</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 從 Git 儲存庫和工作區中同時移除 index.js 檔案</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 只從 Git 儲存庫中移除 index.css, 但保留工作區中的 index.css 檔案</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cached</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.css</span></span></code></pre></div><p><img src="https://i.imgur.com/eukOPMh.png" alt=""></p><h2 id="_16-忽略檔案" tabindex="-1">16. 忽略檔案 <a class="header-anchor" href="#_16-忽略檔案" aria-label="Permalink to &quot;16. 忽略檔案&quot;">​</a></h2><p>一般我們總會有些檔案無須納入 Git 的管理，也不希望它出現在未追蹤的檔案列表。 在這種情況下，我們可以新建一個 <font color="#A10710">.gitignore</font> 的忽略檔案，將要忽略的檔案寫入至 .gitignore 製作忽略檔案清單。但是 .gitignore 本身是需要提交的。</p><p>.gitignore 的格式規範如下：</p><ol><li>以 <font color="#A10710"># 開頭</font>是註釋</li><li>以 <font color="#A10710">/ 結尾</font>的是目錄</li><li>以 <font color="#A10710">/ 開頭</font>防止遞迴</li><li>以 <font color="#A10710">! 開頭</font>表示取反</li><li>可以使用 <font color="#A10710">glob 模式</font>進行檔案和資料夾的匹配 (glob 指簡化的正規表示式)</li></ol><h2 id="_17-glob-模式" tabindex="-1">17. glob 模式 <a class="header-anchor" href="#_17-glob-模式" aria-label="Permalink to &quot;17. glob 模式&quot;">​</a></h2><p>所謂的 glob 模式即簡化了的正規表示式：</p><ol><li><font color="#A10710">星號 *</font> 匹配零個或多個任意字符</li><li><font color="#A10710">[abc]</font> 匹配任何一個列在中括號裡的字符 (此案例匹配一個 a 或匹配一個 b 或匹配一個 c)</li><li><font color="#A10710">問號 ?</font> 指匹配一個任意字符</li><li>在中括號裡使用短橫槓分隔兩個字符，表示所有在這兩個字範圍內的都可以匹配 (比如 [0-9] 表示匹配 0 到 9 的數字)</li><li><font color="#A10710">兩個星號 **</font> 表示匹配任意中間目錄 (比如 <code>a/**/z</code> 可以匹配 a/z、a/b/z 或 a/b/c/z 等)</li></ol><h2 id="_18-gitignore-檔案的範例" tabindex="-1">18. <code>.gitignore</code> 檔案的範例 <a class="header-anchor" href="#_18-gitignore-檔案的範例" aria-label="Permalink to &quot;18. \`.gitignore\` 檔案的範例&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 忽略所有的 .a 文件</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 但追蹤所有的 lib.a, 即使你在前面忽略了 .a 文件</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">lib.a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 只忽略當前目錄下的 TODO 檔案, 而不忽略 subdir/TODO</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/TODO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 忽略任何目錄下名為 build 的資料夾</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 忽略 doc/notes.txt 但不忽略 doc/server/arch.txt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">doc/*.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 忽略 doc/ 目錄及其所有子目錄下的 .pdf 檔</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">doc/**/*.pdf</span></span></code></pre></div><h2 id="_19-查看提交歷史" tabindex="-1">19. 查看提交歷史 <a class="header-anchor" href="#_19-查看提交歷史" aria-label="Permalink to &quot;19. 查看提交歷史&quot;">​</a></h2><p>如果希望回顧專案的提交歷史，可以使用 <font color="#A10710"><code>git log</code></font> 這個簡單且有效的指令。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 按時間先後順序列出所有的提交歷史，最近的提交排在最上面 (按 q 可以退出查看)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 只展示最新的兩條提交歷史，數字可以按需填寫</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在一行上展示最近兩條提交歷史的訊息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --pretty=oneline</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在一行上展示最近兩條提交歷史的訊息，並自定義輸出的格式</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># %h提交的簡寫 hash 值  %an作者名字  %ar作者修訂日期，按多久以前的方式顯示  %s提交說明</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --pretty=format:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%h | %an | %ar | %s</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span></span></code></pre></div><h2 id="_20-退回到指定版本" tabindex="-1">20. 退回到指定版本 <a class="header-anchor" href="#_20-退回到指定版本" aria-label="Permalink to &quot;20. 退回到指定版本&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在一行上展示所有提交歷史</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --pretty=oneline</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用 git reset --hard 指令，根據指定的提交 ID 退回到指定版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commitI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在舊版本中使用 git reflog --pretty=oneline 指令，查看指令操作的歷史</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reflog</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --pretty=oneline</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 再次根據最新的提交 ID，跳轉到最新的版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commitI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre></div><h2 id="_21-小結" tabindex="-1">21. 小結 <a class="header-anchor" href="#_21-小結" aria-label="Permalink to &quot;21. 小結&quot;">​</a></h2><ol><li>初始化 Git 儲存庫 <ul><li><code>git init</code></li></ul></li><li>查看檔案狀態 <ul><li><code>git status</code> 或 <code>git status -s</code></li></ul></li><li>一次性將多個檔案加入至暫存區 <ul><li><code>git add .</code></li></ul></li><li>將暫存區中的檔案提交至 Git 儲存庫 <ul><li><code>git commit -m &quot;提交訊息&quot;</code></li></ul></li></ol>`,88),e=[l];function h(p,o,k,r,d,c){return a(),s("div",null,e)}const f=i(n,[["render",h]]);export{A as __pageData,f as default};
