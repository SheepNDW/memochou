import{_ as t,b as e,o as a,a9 as o}from"./chunks/framework.DOt9ymxk.js";const _=JSON.parse('{"title":"什麼是資料結構？演算法又是什麼？","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ithelp2023/Day02.md","filePath":"ithelp2023/Day02.md","lastUpdated":1694928418000}'),p={name:"ithelp2023/Day02.md"},r=o('<h1 id="什麼是資料結構-演算法又是什麼" tabindex="-1">什麼是資料結構？演算法又是什麼？ <a class="header-anchor" href="#什麼是資料結構-演算法又是什麼" aria-label="Permalink to &quot;什麼是資料結構？演算法又是什麼？&quot;">​</a></h1><blockquote><p>本文同步發布於 2023 iThome 鐵人賽：<a href="https://ithelp.ithome.com.tw/users/20152758/ironman/6714" target="_blank" rel="noreferrer">那些前端不用會，但是可以會的資料結構與演算法</a> 系列文中。</p></blockquote><p>不知道你是否也曾經有過打開知名題庫網站 LeetCode 心想著要刷題練功，然後開始被一大堆完全沒看過的專有名詞轟炸，然後明明是 Easy 題卻完全沒有頭緒，看到 Two Sum 不知道如何寫出 O(n) 解，然後去看教學文章或影片也是講著這些陌生名詞還是聽不懂，<s>最後默默關掉這個白癡網站</s>。</p><p><img src="https://i.imgur.com/POTuTlU.jpeg" alt=""></p><p>這次鐵人賽我想寫一些新手向的資料結構和演算法，讓同樣也是非本科的前端工程師對於這些能夠有一定的認識，將來萬一在面試時被問到了一些基本的資料結構和演算法的問題，也不會完全不知所措。</p><h2 id="資料結構-data-structure" tabindex="-1">資料結構 Data Structure <a class="header-anchor" href="#資料結構-data-structure" aria-label="Permalink to &quot;資料結構 Data Structure&quot;">​</a></h2><blockquote><p>資料結構是資料在電腦中儲存、組織的方式，讓資料可以被有效的使用。</p></blockquote><p>用生活化的例子來說，今天有一個小七店員要把一堆待領的包裹給整理好放到貨架上，他可以把包裹依照大小、重量、形狀或是領貨人的手機號碼等等來分類，這些分類的方式可以看作是一種資料結構。</p><p><img src="https://pgw.udn.com.tw/gw/photo.php?u=https://uc.udn.com.tw/photo/2020/12/24/1/9932865.jpg&amp;x=0&amp;y=0&amp;sw=0&amp;sh=0&amp;sl=W&amp;fw=800&amp;exp=3600&amp;w=930&amp;nt=1" alt=""></p><blockquote><p><a href="https://udn.com/news/story/120911/5119374" target="_blank" rel="noreferrer">圖片來源</a></p></blockquote><p>在電腦科學裡一般我們常見的資料結構有：</p><ul><li>陣列（Array）</li><li>鏈結串列（Linked List）</li><li>堆疊（Stack）</li><li>佇列（Queue）</li><li>雜湊表（Hash Table）</li><li>樹（Tree）</li><li>堆積（Heap）</li><li>圖形（Graph）</li></ul><p>不同資料結構有不同的適用場景，例如陣列的讀取速度很快，但是刪除或新增元素的效率就不太好，而鏈結串列的刪除或新增元素的效率就很好，但是讀取的效率就不太好，所以工程師在設計演算法時，如果使用了不適合的資料結構，會讓程式的執行效率變差。</p><p>在這次鐵人賽中，我會介紹一些基本的線性資料結構，例如：鏈結串列、堆疊、佇列、雜湊表，以及非線性資料結構，例如：樹、堆積等等。讓大家對這些資料結構有一定的了解，在往後的開發中也可以試著利用這些資料結構的概念或是實作來解決問題。</p><h2 id="演算法-algorithm" tabindex="-1">演算法 Algorithm <a class="header-anchor" href="#演算法-algorithm" aria-label="Permalink to &quot;演算法 Algorithm&quot;">​</a></h2><blockquote><p>演算法是一系列的步驟，用來解決特定問題的方法。</p></blockquote><p>演算法其實就是解決特定問題的一種方法或者步驟。它定義了如何從輸入得到輸出，或者如何操作資料結構來達到特定的目標。其與資料結構是密不可分的，如何選擇適合的資料結構，提高演算法的效率，是一個很重要的課題。</p><p>我們剛才提到超商貨架，店員要從一堆包裹中找到特定的包裹的過程，就是一個演算法，此時他可以是從頭開始一個一個找，也可以是根據事先做好的分類，直接找到對應的分類，然後再找到對應的包裹，這兩種方式就是兩種不同的演算法，而我們也可以注意到在一開始對所有包裹進行有效且合理的分類，會對於在尋找特定包裹時有很大的幫助，這就是前面說的選擇合適的資料結構會讓我們的演算法效率更高，也是為什麼這兩者是密不可分的原因。</p><p>那麼我們要怎麼知道這個演算法是不是一個好的演算法呢？我們可以利用時間複雜度（Time Complexity）和空間複雜度（Space Complexity）來衡量一個演算法的好壞。而這兩個概念我會在明天的文章中做更詳細的介紹。</p>',19),l=[r];function i(s,c,h,n,u,m){return a(),e("div",null,l)}const b=t(p,[["render",i]]);export{_ as __pageData,b as default};
